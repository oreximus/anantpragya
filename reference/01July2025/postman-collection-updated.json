{
  "info": {
    "name": "Blog API Collection - With Email Verification",
    "description": "Complete API collection for the Blog Backend with Email Verification System",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5001/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "testOTP",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication & Email Verification",
      "item": [
        {
          "name": "1. Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user. Email verification required before login."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Registration successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.message).to.include('verification');",
                  "    });",
                  "    console.log('✅ User registered successfully. Check email for OTP.');",
                  "} else {",
                  "    console.log('❌ Registration failed:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Verify Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"otp\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-email"]
            },
            "description": "Verify email address using 6-digit OTP sent to email."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Email verification successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.message).to.include('verified');",
                  "    });",
                  "    console.log('✅ Email verified successfully. You can now login.');",
                  "} else {",
                  "    console.log('❌ Email verification failed:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Resend Verification Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/resend-verification",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "resend-verification"]
            },
            "description": "Resend verification email if OTP expired or not received."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Verification email resent successfully.');",
                  "} else {",
                  "    console.log('❌ Failed to resend verification email:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with verified email. Returns access and refresh tokens."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.access_token);",
                  "    pm.collectionVariables.set('refreshToken', response.data.refresh_token);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.access_token).to.exist;",
                  "    });",
                  "    console.log('✅ Login successful. Tokens saved.');",
                  "} else if (pm.response.code === 403) {",
                  "    console.log('❌ Email not verified. Please verify your email first.');",
                  "} else {",
                  "    console.log('❌ Login failed:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            },
            "description": "Request password reset. Sends OTP to email."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Password reset OTP sent to email.');",
                  "} else {",
                  "    console.log('❌ Failed to send password reset OTP:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"otp\": \"123456\",\n  \"new_password\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "Reset password using OTP from email."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Password reset successfully.');",
                  "} else {",
                  "    console.log('❌ Password reset failed:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "7. Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh-token",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh-token"]
            },
            "description": "Refresh access token using refresh token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.access_token);",
                  "    pm.collectionVariables.set('refreshToken', response.data.refresh_token);",
                  "    console.log('✅ Token refreshed successfully.');",
                  "} else {",
                  "    console.log('❌ Token refresh failed:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Profile Management",
      "item": [
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get current user profile information."
          }
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"John Updated\",\n  \"last_name\": \"Doe Updated\",\n  \"email\": \"john.updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Update user profile. If email is changed, re-verification required."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (pm.request.body && pm.request.body.raw) {",
                  "        const requestBody = JSON.parse(pm.request.body.raw);",
                  "        if (requestBody.email) {",
                  "            console.log('⚠️ Email updated. Please verify the new email address.');",
                  "        }",
                  "    }",
                  "    console.log('✅ Profile updated successfully.');",
                  "} else {",
                  "    console.log('❌ Profile update failed:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"current_password\": \"Password123!\",\n  \"new_password\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "change-password"]
            },
            "description": "Change password with current password verification."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Password changed successfully. Confirmation email sent.');",
                  "} else {",
                  "    console.log('❌ Password change failed:', pm.response.json());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout current user session."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('accessToken', '');",
                  "    pm.collectionVariables.set('refreshToken', '');",
                  "    console.log('✅ Logged out successfully. Tokens cleared.');",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Categories (Master)",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/master/categories?page=0&limit=10&search=tech",
              "host": ["{{baseUrl}}"],
              "path": ["master", "categories"],
              "query": [
                {
                  "key": "page",
                  "value": "0",
                  "description": "Page number (optional)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (optional)"
                },
                {
                  "key": "search",
                  "value": "tech",
                  "description": "Search term (optional)"
                }
              ]
            },
            "description": "Get all categories with optional pagination and search."
          }
        },
        {
          "name": "Get Category by ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/master/categories/660e8400-e29b-41d4-a716-446655440000",
              "host": ["{{baseUrl}}"],
              "path": ["master", "categories", "660e8400-e29b-41d4-a716-446655440000"]
            },
            "description": "Get specific category by ID."
          }
        },
        {
          "name": "Create Category (Admin Only)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Programming\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/master/categories",
              "host": ["{{baseUrl}}"],
              "path": ["master", "categories"]
            },
            "description": "Create new category (Admin access required)."
          }
        },
        {
          "name": "Update Category (Admin Only)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Software Development\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/master/categories/660e8400-e29b-41d4-a716-446655440000",
              "host": ["{{baseUrl}}"],
              "path": ["master", "categories", "660e8400-e29b-41d4-a716-446655440000"]
            },
            "description": "Update existing category (Admin access required)."
          }
        },
        {
          "name": "Delete Category (Admin Only)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/master/categories/660e8400-e29b-41d4-a716-446655440000",
              "host": ["{{baseUrl}}"],
              "path": ["master", "categories", "660e8400-e29b-41d4-a716-446655440000"]
            },
            "description": "Delete category (Admin access required)."
          }
        }
      ]
    },
    {
      "name": "Blog Posts",
      "item": [
        {
          "name": "Get All Posts (Public)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/blog/posts?page=0&limit=10&category_id=660e8400-e29b-41d4-a716-446655440000&search=nestjs",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "posts"],
              "query": [
                {
                  "key": "page",
                  "value": "0",
                  "description": "Page number (optional)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (optional)"
                },
                {
                  "key": "category_id",
                  "value": "660e8400-e29b-41d4-a716-446655440000",
                  "description": "Filter by category (optional)"
                },
                {
                  "key": "search",
                  "value": "nestjs",
                  "description": "Search in title, content, tags (optional)"
                }
              ]
            },
            "description": "Get all published posts with filtering and search."
          }
        },
        {
          "name": "Get Post by ID (Public)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/blog/posts/770e8400-e29b-41d4-a716-446655440000",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "posts", "770e8400-e29b-41d4-a716-446655440000"]
            },
            "description": "Get specific post by ID with author and category details."
          }
        },
        {
          "name": "Create Post",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Introduction to React Hooks\",\n  \"content\": \"React Hooks are a powerful feature that allows you to use state and other React features without writing a class component. In this comprehensive guide, we'll explore the most commonly used hooks and how to implement them in your projects.\\n\\n## useState Hook\\n\\nThe useState hook is the most basic hook that allows you to add state to functional components.\\n\\n```javascript\\nimport React, { useState } from 'react';\\n\\nfunction Counter() {\\n  const [count, setCount] = useState(0);\\n\\n  return (\\n    <div>\\n      <p>You clicked {count} times</p>\\n      <button onClick={() => setCount(count + 1)}>\\n        Click me\\n      </button>\\n    </div>\\n  );\\n}\\n```\\n\\n## useEffect Hook\\n\\nThe useEffect hook lets you perform side effects in functional components.\",\n  \"category_id\": \"660e8400-e29b-41d4-a716-446655440000\",\n  \"tags\": \"react,hooks,javascript,frontend,tutorial\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/blog/posts",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "posts"]
            },
            "description": "Create a new blog post (Authentication required)."
          }
        },
        {
          "name": "Update Post",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Advanced React Hooks Patterns\",\n  \"content\": \"Updated content about advanced React Hooks patterns and best practices. This post covers custom hooks, performance optimization, and common pitfalls to avoid.\",\n  \"category_id\": \"660e8400-e29b-41d4-a716-446655440000\",\n  \"tags\": \"react,hooks,advanced,patterns,performance\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/blog/posts/770e8400-e29b-41d4-a716-446655440000",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "posts", "770e8400-e29b-41d4-a716-446655440000"]
            },
            "description": "Update existing post (Owner or Admin only)."
          }
        },
        {
          "name": "Delete Post",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/blog/posts/770e8400-e29b-41d4-a716-446655440000",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "posts", "770e8400-e29b-41d4-a716-446655440000"]
            },
            "description": "Soft delete post (Owner or Admin only)."
          }
        },
        {
          "name": "Get My Posts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/blog/my-posts?page=0&limit=10&search=react",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "my-posts"],
              "query": [
                {
                  "key": "page",
                  "value": "0",
                  "description": "Page number (optional)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (optional)"
                },
                {
                  "key": "search",
                  "value": "react",
                  "description": "Search term (optional)"
                }
              ]
            },
            "description": "Get current user's posts with search and pagination."
          }
        }
      ]
    },
    {
      "name": "Post Activities",
      "item": [
        {
          "name": "Add Post Activity",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"like_count\": 1,\n  \"comment\": \"Great article! Very informative and well-written. The examples are clear and easy to follow. Thanks for sharing!\",\n  \"share_count\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/blog/posts/770e8400-e29b-41d4-a716-446655440000/activity",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "posts", "770e8400-e29b-41d4-a716-446655440000", "activity"]
            },
            "description": "Add activity to a post (like, comment, share)."
          }
        },
        {
          "name": "Get Post Activities",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/blog/posts/770e8400-e29b-41d4-a716-446655440000/activities?page=0&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "posts", "770e8400-e29b-41d4-a716-446655440000", "activities"],
              "query": [
                {
                  "key": "page",
                  "value": "0",
                  "description": "Page number (optional)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (optional)"
                }
              ]
            },
            "description": "Get all activities for a specific post."
          }
        }
      ]
    },
    {
      "name": "Admin Only",
      "item": [
        {
          "name": "Get All Posts (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/blog/all-posts?page=0&limit=10&user_id=550e8400-e29b-41d4-a716-446655440001&category_id=660e8400-e29b-41d4-a716-446655440000&search=nestjs",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "all-posts"],
              "query": [
                {
                  "key": "page",
                  "value": "0",
                  "description": "Page number (optional)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (optional)"
                },
                {
                  "key": "user_id",
                  "value": "550e8400-e29b-41d4-a716-446655440001",
                  "description": "Filter by user (optional)"
                },
                {
                  "key": "category_id",
                  "value": "660e8400-e29b-41d4-a716-446655440000",
                  "description": "Filter by category (optional)"
                },
                {
                  "key": "search",
                  "value": "nestjs",
                  "description": "Search term (optional)"
                }
              ]
            },
            "description": "Admin view of all posts including deleted ones."
          }
        },
        {
          "name": "Force Delete Post (Admin)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/blog/posts/770e8400-e29b-41d4-a716-446655440000/force",
              "host": ["{{baseUrl}}"],
              "path": ["blog", "posts", "770e8400-e29b-41d4-a716-446655440000", "force"]
            },
            "description": "Permanently delete post from database (Admin only)."
          }
        }
      ]
    },
    {
      "name": "System",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/../health",
              "host": ["{{baseUrl}}"],
              "path": ["..", "health"]
            },
            "description": "Check API server health and status."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('OK');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if expired",
          "const accessToken = pm.collectionVariables.get('accessToken');",
          "const refreshToken = pm.collectionVariables.get('refreshToken');",
          "",
          "if (accessToken && refreshToken) {",
          "    // Check if token is expired (basic check)",
          "    try {",
          "        const tokenPayload = JSON.parse(atob(accessToken.split('.')[1]));",
          "        const currentTime = Math.floor(Date.now() / 1000);",
          "        ",
          "        if (tokenPayload.exp && tokenPayload.exp < currentTime) {",
          "            console.log('🔄 Access token expired, attempting refresh...');",
          "            // Token refresh logic would go here",
          "        }",
          "    } catch (e) {",
          "        // Invalid token format",
          "    }",
          "}"
        ]
      }
    }
  ]
}
